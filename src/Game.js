// Generated by CoffeeScript 1.12.5
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = (function() {
    function _Class() {
      this._onWindowResize = bind(this._onWindowResize, this);
      this._loop = bind(this._loop, this);
      this._initialize = bind(this._initialize, this);
      this.setScene = bind(this.setScene, this);
      this.start = bind(this.start, this);
    }

    _Class.prototype.start = function() {
      this.nowTime = this.prevTime = Date.now();
      this._initialize();
      return this._loop();
    };

    _Class.prototype.setScene = function(scene) {
      this.scene = scene;
      return this;
    };

    _Class.prototype._initialize = function() {
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(this.renderer.domElement);
      return window.addEventListener('resize', this._onWindowResize, false);
    };

    _Class.prototype._loop = function() {
      var deltaTime, ref, ref1, ref2;
      this.nowTime = Date.now();
      deltaTime = this.nowTime - this.prevTime;
      if ((ref = this.scene) != null) {
        ref.update();
      }
      this.renderer.render((ref1 = this.scene) != null ? ref1.pscene : void 0, (ref2 = this.scene) != null ? ref2.camera : void 0);
      requestAnimationFrame(this._loop);
      return this.prevTime = this.nowTime;
    };

    _Class.prototype._onWindowResize = function() {
      var ref, ref1;
      if ((ref = this.scene) != null) {
        ref.camera.aspect = window.innerWidth / window.innerHeight;
      }
      if ((ref1 = this.scene) != null) {
        ref1.camera.updateProjectionMatrix();
      }
      return this.renderer.setSize(window.innerWidth, window.innerHeight);
    };

    return _Class;

  })();

}).call(this);

//# sourceMappingURL=Game.js.map
