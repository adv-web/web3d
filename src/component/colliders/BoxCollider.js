// Generated by CoffeeScript 1.12.5
(function() {
  var BoxCollider, Collider,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Collider = require("./Collider");

  BoxCollider = (function(superClass) {
    extend(BoxCollider, superClass);

    module.exports = BoxCollider;

    function BoxCollider(options) {
      var isTrigger;
      if (options == null) {
        options = {};
      }
      this.afterAdded = bind(this.afterAdded, this);
      isTrigger = options.isTrigger ? options.isTrigger : false;
      BoxCollider.__super__.constructor.call(this, "BoxCollider", isTrigger);
      this.center = options.center;
      this.size = options.size;
    }

    BoxCollider.prototype.afterAdded = function() {
      var physics;
      BoxCollider.__super__.afterAdded.apply(this, arguments);
      if (this.gameObject.mesh === void 0 || this.gameObject.mesh === null) {
        console.error("BoxCollider component needs Mesh, but there is no mesh");
        return;
      }
      physics = this.gameObject.mesh._physijs;
      if (physics === void 0) {
        console.error("BoxCollider component needs Physijs Mesh. but the mesh is not");
        return;
      }
      physics.collider = {};
      if (this.center !== void 0) {
        physics.collider.center = this.center;
      }
      if (this.size) {
        return physics.collider.size = this.size;
      }
    };

    return BoxCollider;

  })(Collider);

}).call(this);

//# sourceMappingURL=BoxCollider.js.map
