// Generated by CoffeeScript 1.12.5
(function() {
  var Collider, Component, Input,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component = require("../../Component");

  Input = require("../../Input");

  Collider = (function(superClass) {
    extend(Collider, superClass);

    module.exports = Collider;

    function Collider(name, isTrigger) {
      this.isTrigger = isTrigger;
      this.update = bind(this.update, this);
      this.beforeRemoved = bind(this.beforeRemoved, this);
      this.afterAdded = bind(this.afterAdded, this);
      this._onCollision = bind(this._onCollision, this);
      Collider.__super__.constructor.call(this, name);
      this.activateMoveRate = 5;
      this._activate = 0;
    }

    Collider.prototype._onCollision = function(other_mesh, linear_velocity, angular_velocity) {
      var comp, key, ref, results;
      if (this.gameObject.mesh.name === 'player') {
        if (other_mesh.name !== 'ground') {
          console.log("player on collision");
          if (!this.isTrigger) {
            Input.canMove = false;
          }
        }
      }
      ref = this.gameObject.components;
      results = [];
      for (key in ref) {
        comp = ref[key];
        results.push(typeof comp.onCollision === "function" ? comp.onCollision(other_mesh, linear_velocity, angular_velocity) : void 0);
      }
      return results;
    };

    Collider.prototype.afterAdded = function() {
      return this.gameObject.mesh.addEventListener('collision', this._onCollision);
    };

    Collider.prototype.beforeRemoved = function() {
      return this.gameObject.mesh.removeEventListener('collision', this._onCollision);
    };

    Collider.prototype.update = function() {
      if (!Input.canMove) {
        this._activate++;
        if (this._activate >= this.activateMoveRate) {
          this._activate = 0;
          return Input.canMove = true;
        }
      }
    };

    return Collider;

  })(Component);

}).call(this);

//# sourceMappingURL=Collider.js.map
