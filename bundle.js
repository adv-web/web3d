/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.5
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = (function() {
    function _Class() {
      this._onWindowResize = bind(this._onWindowResize, this);
      this._loop = bind(this._loop, this);
      this._initialize = bind(this._initialize, this);
      this.setScene = bind(this.setScene, this);
      this.start = bind(this.start, this);
      this.scenes = {};
      this.scripts = [];
    }

    _Class.instance = function() {
      if (!this.game) {
        return this.game = new Game();
      } else {
        return this.game;
      }
    };

    _Class.prototype.addScene = function(scene) {
      return this.scenes[scene.name] = scene;
    };

    _Class.prototype.addScript = function(script) {
      return this.scripts.push(script);
    };

    _Class.prototype.start = function(name) {
      this.nowTime = this.prevTime = Date.now();
      this._initialize();
      return this._loop();
    };

    _Class.prototype.setScene = function(scene1) {
      this.scene = scene1;
      return this;
    };

    _Class.prototype._initialize = function() {
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(this.renderer.domElement);
      return window.addEventListener('resize', this._onWindowResize, false);
    };

    _Class.prototype._loop = function() {
      var deltaTime, ref, ref1, ref2;
      this.nowTime = Date.now();
      deltaTime = this.nowTime - this.prevTime;
      if ((ref = this.scene) != null) {
        ref.update();
      }
      this.renderer.render((ref1 = this.scene) != null ? ref1.pscene : void 0, (ref2 = this.scene) != null ? ref2.camera : void 0);
      requestAnimationFrame(this._loop);
      return this.prevTime = this.nowTime;
    };

    _Class.prototype._onWindowResize = function() {
      var ref, ref1;
      if ((ref = this.scene) != null) {
        ref.camera.aspect = window.innerWidth / window.innerHeight;
      }
      if ((ref1 = this.scene) != null) {
        ref1.camera.updateProjectionMatrix();
      }
      return this.renderer.setSize(window.innerWidth, window.innerHeight);
    };

    return _Class;

  })();

}).call(this);

//# sourceMappingURL=Game.js.map


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.5
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  module.exports = (function() {
    function _Class(mesh) {
      this.mesh = mesh;
      this.broadcast = bind(this.broadcast, this);
      this.removeComponent = bind(this.removeComponent, this);
      this.getComponent = bind(this.getComponent, this);
      this.addComponent = bind(this.addComponent, this);
      this.components = {};
    }

    _Class.prototype.addComponent = function(comp) {
      comp.gameObject = this;
      return this.components[comp.name] = comp;
    };

    _Class.prototype.getComponent = function(name) {
      return this.components[name];
    };

    _Class.prototype.removeComponent = function(name) {
      return this.components[name] = null;
    };

    _Class.prototype.broadcast = function() {
      var args, comp, name, ref, results;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      ref = this.components;
      results = [];
      for (name in ref) {
        comp = ref[name];
        results.push(comp.receive.apply(comp, args));
      }
      return results;
    };

    return _Class;

  })();

}).call(this);

//# sourceMappingURL=GameObject.js.map


/***/ }),
/* 2 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.5
(function() {
  var Scene,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = (function() {
    function _Class() {}

    return _Class;

  })();

  Scene = (function() {
    function Scene(initializer) {
      this.update = bind(this.update, this);
      this.addLight = bind(this.addLight, this);
      this.addObject = bind(this.addObject, this);
      this.pscene = new Physijs.Scene();
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);
      this.camera.position.set(0, -0.5, 1);
      this.objects = [];
      initializer(this);
    }

    Scene.prototype.addObject = function(object) {
      this.objects.push(object);
      return this.pscene.add(object.mesh);
    };

    Scene.prototype.addLight = function(light) {
      return this.pscene.add(light);
    };

    Scene.prototype.update = function() {
      var comp, i, len, name, object, ref, ref1;
      ref = this.objects;
      for (i = 0, len = ref.length; i < len; i++) {
        object = ref[i];
        ref1 = object.components;
        for (name in ref1) {
          comp = ref1[name];
          if (typeof comp.update === "function") {
            comp.update();
          }
        }
      }
      return this.pscene.simulate();
    };

    return Scene;

  })();

}).call(this);

//# sourceMappingURL=Scene.js.map


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.5
(function() {
  var Component, Rotate,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Component = __webpack_require__(6);

  Rotate = (function(superClass) {
    extend(Rotate, superClass);

    function Rotate() {
      this.update = bind(this.update, this);
      Rotate.__super__.constructor.call(this, "Rotate");
    }

    Rotate.prototype.update = function() {
      var trans;
      console.log("haha");
      trans = this.gameObject.mesh;
      trans.rotation.x += 0.1;
      return trans.rotation.y += 0.1;
    };

    return Rotate;

  })(Component);

  module.exports = Rotate;

}).call(this);

//# sourceMappingURL=Script.js.map


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.5
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports = (function(superClass) {
    extend(_Class, superClass);

    function _Class() {
      this.update = bind(this.update, this);
      this.name = "Test";
    }

    _Class.prototype.update = function() {
      this.gameObject.mesh.rotation.y += 1;
      return this.gameObject.mesh.__dirtyRotation = true;
    };

    return _Class;

  })(__webpack_require__(5));

}).call(this);

//# sourceMappingURL=Test.js.map


/***/ }),
/* 5 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.5
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  module.exports = (function() {
    function _Class(name) {
      this.name = name;
      this.receive = bind(this.receive, this);
      this.gameObject = null;
    }

    _Class.prototype.receive = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    };

    return _Class;

  })();

}).call(this);

//# sourceMappingURL=Component.js.map


/***/ }),
/* 6 */
/***/ (function(module, exports) {

// Generated by CoffeeScript 1.12.5
(function() {
  var Component,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  Component = (function() {
    function Component(name) {
      this.name = name;
      this.receive = bind(this.receive, this);
      this.gameObject = null;
    }

    Component.prototype.receive = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    };

    return Component;

  })();

  module.exports = Component;

}).call(this);

//# sourceMappingURL=Component.js.map


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Created by maliut on 2017/4/21.
 */
var Game = __webpack_require__(0);
var Scene = __webpack_require__(2);
var GameObject = __webpack_require__(1);
var Test = __webpack_require__(4);

var voxParser = new vox.Parser();
function scene1(scene) {
    // light
    var ambient = new THREE.AmbientLight(/*0x101030*/0xcccccc);
    scene.addLight(ambient);
    // object
    voxParser.parse('vox/ground.vox').then(function (voxelData) {
        var builder = new vox.MeshBuilder(voxelData, {voxelSize: 0.05});
        var threeMesh = builder.createMesh();
        var mesh = new Physijs.BoxMesh(threeMesh.geometry, threeMesh.material, 0);
        mesh.position.set(0, -1, -1);
        scene.addObject(new GameObject(mesh));
    });
    voxParser.parse('vox/chr_knight.vox').then(function (voxelData) {
        var builder = new vox.MeshBuilder(voxelData, {voxelSize: 0.03});
        var threeMesh = builder.createMesh();
        var mesh = new Physijs.ConvexMesh(threeMesh.geometry, threeMesh.material);
        var character = new GameObject(mesh);
        // TODO add components on character
        character.addComponent(new Test());
        scene.addObject(character);
    });

    geometry = new THREE.BoxGeometry( 1, 1, 1 );
    material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
    cubeMesh = new THREE.Mesh( geometry, material );
    cube = new GameObject(cubeMesh);
    scene.addObject(cube);

    var Rotate = __webpack_require__(3);
    rotateScript = new Rotate();
    cube.addComponent(rotateScript);
}

var scene = new Scene(scene1);
new Game().setScene(scene).start();

/***/ })
/******/ ]);